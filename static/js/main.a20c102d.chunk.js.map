{"version":3,"sources":["components/TodoForm.js","actions/todosAction.js","actions/types.js","components/TodoList.js","components/UsersList.js","actions/usersAction.js","App.js","serviceWorker.js","reducers/todosRed.js","reducers/usersRed.js","reducers/index.js","store.js","index.js"],"names":["TodoForm","state","newTodo","onChange","e","_this","setState","Object","defineProperty","target","name","value","onSubmit","preventDefault","console","log","props","addNewTodo","this","react_default","a","createElement","type","Component","connect","payload","TodoList","todos","map","todo","id","key","UsersList","fetchUsers","users","user","dispatch","fetch","then","res","json","App","className","components_TodoForm","components_TodoList","components_UsersList","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","arguments","length","undefined","action","concat","toConsumableArray","middleware","thunk","store","createStore","compose","applyMiddleware","apply","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a20c102d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addNewTodo } from \"../actions/todosAction\";\n\nclass TodoForm extends Component {\n  state = {\n    newTodo: \"\"\n  };\n\n  onChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n    // console.log(this.state.newTodo);\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    console.log(this.state.newTodo);\n    this.props.addNewTodo(this.state.newTodo);\n    this.setState({\n      newTodo: \"\"\n    });\n\n    // Call action\n  };\n\n  render() {\n    const { newTodo } = this.state;\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          type='text'\n          name='newTodo'\n          value={newTodo}\n          onChange={this.onChange}\n        />\n        <button>Submit</button>\n      </form>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { addNewTodo }\n)(TodoForm);\n","import { ADD_TODO } from \"./types\";\n\nexport const addNewTodo = newTodo => {\n  return {\n    type: ADD_TODO,\n    payload: newTodo\n  };\n};\n","export const ADD_TODO = \"ADD_TODO\";\nexport const FETCH_USERS = \"FETCH_USERS\";\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass TodoList extends Component {\n  render() {\n    return (\n      <div>\n        <ul>\n          {this.props.todos.map((todo, id) => {\n            return <li key={id}>{todo}</li>;\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { todos: state.todos };\n};\n\nexport default connect(mapStateToProps)(TodoList);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchUsers } from \"../actions/usersAction\";\n\nclass UsersList extends Component {\n  componentDidMount() {\n    this.props.fetchUsers();\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>User List</h3>\n        <ul>\n          {this.props.users.map((user, id) => {\n            return <li key={id}>{user.name}</li>;\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { users: state.users };\n};\n\nexport default connect(\n  mapStateToProps,\n  { fetchUsers }\n)(UsersList);\n","import { FETCH_USERS } from \"./types\";\n\nconst usersUrl = \"https://jsonplaceholder.typicode.com/users\";\n\nexport const fetchUsers = () => {\n  return dispatch => {\n    fetch(usersUrl)\n      .then(res => res.json())\n      .then(users => {\n        console.log(users);\n        dispatch({\n          type: FETCH_USERS,\n          payload: users\n        });\n      });\n  };\n};\n","import React from \"react\";\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\nimport UsersList from \"./components/UsersList\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <TodoForm />\n      <TodoList />\n      <UsersList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_TODO } from \"../actions/types\";\n\nconst initialState = [];\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n};\n","import { FETCH_USERS } from \"../actions/types\";\n\nlet initialState = [];\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_USERS:\n      console.log(action.payload);\n      return [...state, ...action.payload];\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\n\nimport todosRed from \"./todosRed\";\nimport usersRed from \"./usersRed\";\n\nconst rootReducer = combineReducers({\n  todos: todosRed,\n  users: usersRed\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}